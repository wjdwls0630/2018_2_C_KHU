Function 요점들

Function(함수)를 쓰는 이유? 효율성 + 재사용

ex) 두 수를 입력받아 덧셈을 하는 add함수를 만들어보자
#include<iostream>
using namespace std;
int add(int x, int y)
{
	return x+y;
} // type name(parameters) { codes } - 함수의 선언과 구현
int main()
{
	int a,b;
	cin >> a >> b;
	int c = add(a,b);
	cout << c << endl; // 변수를 선언 안하고 바로 콘솔창으로 출력도 가능!
	return 0;
}
/*다른 방법
void add(int x, int y)
{
	cout << x+y << endl;
}
int main()
{
	int a,b;
	cin >> a >> b;
	add(a,b);
	return 0;
} // 이렇게도 구현이 가능함*/

함수의 호출 프로세스 - main함수에서 호출된다 -> main함수 밖의 함수 정의부로 간다 -> 반환값이 있으면 반환하고 void형이면 그 내용 그대로 main으로 끌고 온다 -> 콘솔창에 출력된다 -> 다음 줄로 넘어간다

※ void type : return이 없음. 함수명 자체로만 호출이 가능

Recursion(재귀함수) - 조건문 배우고 나면 활용 가능(내 안에 나 있다, 자기 자신 안에 자기 자신이 또 있음. 어느 선에서는 끝남.)
ex) 팩토리얼을 구현하시오.
int fact(int x)
{
	if(x==0)
		return 1;
	else
		return x * fact(x-1);
} // x가 0일 때 1을 반환하고, 나머지 경우는 x가 0이 되기 전까지 자기 자신을 계속 부른다.

Nested Function Call - 내 안에 너 있다, 제일 안으로 들어갔다 밖으로 리턴하며 돌아옴.
ex) add(더하기)와 sub(빼기)함수를 만들고(int type, parameter는 int형 2개) 다음 식을 함수화 하라.
100-(40+72-(50+23))
답: sub(100, sub(add(40,72),add(50,23)))

ex2) 4자리 수를 입력받아 각 자리수를 추출하는 함수와 각 자리의 합을 구하는 함수를 구현하여라.

#include<iostream>
using namespace std;
int first(int target)
{
	return target / 1000;
}
int second(int target)
{
	return (target % 1000) / 100;
}
int third(int target)
{
	return (target % 100) / 10;
}
int fourth(int target)
{
	return target % 10;
}
int sum(int target)
{
	return first(target)+second(target)+third(target)+fourth(target);
}
int main()
{
	int tar;
	cin >> tar;
	cout << sum(tar) << endl;
	return 0;
}

키포인트: 어떻게 각 자리수를 추출할 것인가 / nested function call의 활용

call by value vs call by reference
parameter에 &가 없으면 call(pass) by value, 있으면 call(pass) by reference
레퍼런스 변수의 효과는 사용자 설정 함수들 내에서 일어나는 변화가 main함수에도 영향을 끼친다는 것!!
ex) 두 수의 값을 바꾸는 swap함수를 구현하시오.
void swap(int x, int y)
{
	int temp = x; // 이 친구는 swap함수 내에서만 있는 지역변수(local variable)
	x = y;
	y = temp;
} // 근데 얘는 함수 안에서만 바뀌고 main에서는 바뀌지 않음!!
void swap(int& x, int& y)
{
	int temp = x;
	x = y;
	y = temp;
} // 얘는 함수 안에서 바뀐 영향이 main에도 적용됨!!
쉽게 말해 reference type의 parameter가 있다면 함수 내의 변화와 main함수 사이를 연결해주는 "다리"

default parameter
void func(int x = 1, int y = 2)
{
	cout << x << ", " << y << endl;
}
func() // 1, 2
func(10) // 10, 2
func(110,20) // 110, 20

난수출력
#include<iostream>
#include<iomanip> // srand, rand 쓰기 위한 library
using namespace std;
int main()
{
	srand((unsigned int)time(NULL)); // srand의 인자는 seed라고 불리는데, 일반 정수도 들어가는 것이 가능.
	int num = rand()%6+1; // 1~6까지 난수생성
	cout << num << endl;
	return 0;
}

여러가지 함수들
double pow(숫자1, 숫자2) - 숫자1의 숫자2제곱 // pow(10,3) = 1000
int floor(숫자) - 버림
int ceil(숫자) - 올림
double sqrt(숫자) - 루트
setw(숫자) - 숫자 칸만큼의 공백을 생성 // cout << setw(5) << 1; ( )( )( )( )1
setfill('문자') - setw로 인해 만들어진 공백을 문자로 채운다 // cout << setw(5) << setfill('*') << 1; ****1
setprecision(숫자) - 소수점 몇째자리까지 출력? // cout << setprecision(4); // 4자리까지 출력
fixed - 소수점 고정 // cout << fixed;

그 외 몇가지 기출들
2014 플밍기 Quiz#3
int getRadius() // 함수 내에서 사용자 입력을 받아 그 값을 리턴.
double calCircleArea(int radius) // 원의 넓이 계산값을 리턴. (a = r*r*3.14)
내맛대로 추가 - 3.14->3.1415로 바꾸고 소수점 3자리까지 출력되도록 수정.

2014 플밍기 Quiz#4
int fun(파라미터는 1개) // x에다 내부에서 생성한 랜덤 수 y(20~29) 곱해서 x 갱신, 메인함수에 y값을 return 문을 이용해 전달.
main함수 - 정수 s 입력받아 fun 함수에 전달, fun 리턴값 출력, 갱신된 s값 출력

해설
#include<iostream>
#include<iomanip>
using namespace std;
#define Q 6 // 이 부분의 숫자를 정해진 수로 바꿔주면 해당 수에 있는 코드가 실행됨. 없다면 #else로 감.
#if Q==1 // 16' Q1
int main()
{
	double test = 2016.0418;
	int num1, num2;
	cin >> num1 >> num2;
	double part1 = floor(test) - num1;
	double part2 = test - floor(test) + (double)num2 / 1000;
	cout << fixed;
	cout << setprecision(4);
	cout << part1 + part2 << endl;
	return 0;
}
#elif Q==2 // 16' Q2
int main()
{
	srand((unsigned int)time(NULL));
	int n;
	cout << "정수 입력: ";
	cin >> n;
	int range = (int)pow(10, n);
	int num = rand() % range * 9 / 10 + range / 10;
	cout << n << "자리 랜덤 정수 = " << num << endl;
	return 0;
}
#elif Q==3 // 16' Q3
void multi1(int, int);
int multi2(int, int);
int main()
{
	int num1, num2;
	cin >> num1 >> num2;
	multi1(num1, num2);
	cout << multi2(num1, num2) << endl;
	return 0;
}
void multi1(int x, int y)
{
	cout << x * y << endl;
}
int multi2(int x, int y)
{
	return x * y;
}
#elif Q==4 // 16' Q4
void getlength(int, int, int&);
void getheight(int, int, int&);
int main()
{
	int topx, topy, botx, boty, length, height;
	cin >> topx >> topy >> botx >> boty;
	getlength(topx, botx, length);
	getheight(topy, boty, height);
	cout << length * height << endl;
	return 0;
}
void getlength(int x, int y, int& z)
{
	z = abs(x - y);
}
void getheight(int x, int y, int& z)
{
	z = abs(x - y);
}
#elif Q==5 // 16' Q5 (안들어감)
int main()
{
	srand((unsigned int)time(NULL));
	int i = rand() % 10 + 1;
	int j = rand() % 10 + 1;
	cout << "랜덤 정수: " << i << " " << j << endl;
	if (i%j == 0)
		cout << i << " / " << j << " = " << i / j << endl;
	else
		cout << i << " / " << j << " = Not Divided!" << endl;
	return 0;
}
#elif Q==6 // 14' quiz3
int getRadius()
{
	int radius;
	cin >> radius;
	return radius;
}
double calCircleArea(int radius)
{
	cout << radius * radius*3.14 << endl;
	return 0;
}
int main()
{
	int r = getRadius();
	calCircleArea(r);
	return 0;
}
#elif Q==7
int fun(int& x)
{
	int y = rand() % 10 + 20;
	x *= y;
	return y;
}
int main()
{
	srand((unsigned int)time(NULL));
	int s;
	cin >> s;
	cout << fun(s) << endl;
	cout << s << endl;
}
#else // Q1에 대한 다양한 접근법
void calculation1(double target, int num1, int num2, double& result)
{
	result = (floor(target) - num1) + (target - floor(target) + (double)num2 / 1000);
}
double calculation2(double target, int num1, int num2)
{
	return (floor(target) - num1) + (target - floor(target) + (double)num2 / 1000);
}
double calculation3(double target, int num1, int num2)
{
	double temp = (floor(target) - num1) + (target - floor(target) + (double)num2 / 1000);
	cout << temp << endl;
	return 0;
}
int main()
{
	double test = 2016.0418;
	double result;
	int num1, num2;
	cin >> num1 >> num2;
	calculation1(test, num1, num2, result);
	cout << fixed;
	cout << setprecision(4);
	cout << "Answer of calculation1 function is : ";
	cout << result << endl;
	cout << "Answer of calculation2 function is : ";
	cout << calculation2(test, num1, num2) << endl;
	cout << "Answer of calculation3 function is : ";
	calculation3(test, num1, num2);
	return 0;
}
#endif
/*void swap(int& x, int& y)
{
// x=1000 y=0100
	x = x^y; // x=1000^0100=1100 y=0100
	y = x^y; // x=1100 y=1100^0100=1000
	x = x^y; // x=1100^1000=0100 y=1000
} // XOR연산자를 사용한 17년도 2학기 기출문제
int main()
{
	int x = 8, y = 4;
	swap(x, y);
	cout << x << " " << y << endl;
	return 0;
}*/