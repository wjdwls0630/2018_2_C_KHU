2. 벡터
자동으로 동적할당하는 배열
#include <vector>

1차원 std::vector<데이터형> 벡터명(크기);
2차원 std::vector<std::vector<데이터형>> 벡터명(행 크기, std::vector<데이터형>(열 크기))

vector는 크기를 정해줘야 segmentation fault가 안뜬다. 어떻게든 구하자

벡터 함수
vector[i]=a; 대입하기(이렇게 대입하는게 맘 편함)(대신 size를 정해줘서 해당 인덱스에 메모리가 할당 되있어야한다.
아니면 segmentation fault)
vector.push_back(const & ref)(맨뒤에 원소 넣는건데 넣는 값이 const 여야한다.)
vector.erase(v.begin()+i) ( i번째 인덱스 제거)
v.insert(v.begin()+i,a) i번째에 a값 할당
v.size() 벡터 크기 리턴
v.resize(int) 숫자크기만큼 다시 사이즈
v.begin() 벡터의 처음 iterator
v.end() 벡터의 끝 iterator (마지막 원소에서 하나 더 간 것)
v.rbegin() 벡터를 거꾸로해서 첫번째
v.rend() 벡터를 거꾸로해서 마지막
v.pop_back() 맨뒤 원소 제거
v.at(index) index값에 있는 값 참조
v.empty() 비워져있으면 true 아니면 false
v.clear() 벡터 비우기

벡터는 임의의 인덱스에 접근 가능하다.

리스트(list)는 순차 접근만 가능하다
std::list<type> 리스트명
즉 .at, []은 불가능하고 양방향 반복자 ++, --로만 접근 가능
위의 벡터 함수 모두 사용 가능 (임의의 인덱스 접근 제외)
대신 객체 자체의 sort 함수 있음
sort() default 오름차순)
sort(greater<type>()) 내림차순
lt.reverse()리스트 역으로 뒤집음
lt.remove(k) k같은 원소 제거
lt2.merge(lt1) lt2에 lt1을 합친후 오름차순 정렬
lt2.merge(lt1,greater<type>) lt2에 lt1을 합친후 내림차순 정렬

배열의 동적할당은

int *p = new int[size];
로 하면되고 지울때는
delete []p 하면 된다

2차원 배열의 동적할당은
int** table=new int*[row];
table[i]=new int[col];
이런 식이고

지울때는
for(int i=0; i<row; i++){
delete [] table[i];
}
delete []table;
하면 된다.

4. 클래스

private 클래스 멤버함수에서는 접근 가능 하지만 그 외 함수에서는 접근 불가능

Constructor
클래스 명(파라미터=디폴트) : 멤버변수(파라미터){
그 외 코드
}
Destructor
~클래스명(){}

operator overloading

friend std::ostream & operator<<(std::ostream & os, const Fraction & fr);
Fraction & operator+=(const Fraction &fr);
Fraction & operator-=(const Fraction &fr);
Fraction & operator*=(const Fraction &fr);
Fraction & operator/=(const Fraction &fr);
const Fraction operator+(const Fraction &fr) const;
const Fraction operator-(const Fraction &fr) const;
const Fraction operator*(const Fraction &fr) const;
const Fraction operator/(const Fraction &fr) const;
Fraction & operator =(const Fraction &fr);
bool operator == (const Fraction & fr) const;
bool operator!=(const Fraction &fr) const;
Fraction & operator++();
const Fraction operator++(int);

friend 함수는 private 접근 가능
static은 객체로 부르는 함수가 아니므로
static 멤버 변수는 전역 변수처럼
클래스 밖 메인 함수 밖에서 초기화

int 클래스명::변수이름=값;

static 멤버 함수는 객체로 부르는 함수는 아니지만 클래스의 멤버 함수이므로 호출할때

클래스명::함수명()

으로 호출한다.

상속

class 자식클래스명 : public 부모클래스명

대부분 public으로 받음

public으로 받으면 다 사용 가능하지만 부모의 private은 접근하지 못한다.

friend클래스는 접근할수 있는데 대신 polymorphism형태의 코드는 사용하지 못한다.

상속받은 모든 부모의 public은 사용 가능하다

polymorphism
부모클래스명 * 로 선언
virtual로 만든 함수를 override하면 알아서 polymorphism을 통해 여러 자식 클래스들 처럼 사용 가능

template<typename T>을 통해 generic 프로그래밍 가능

template<typename T>리턴 형 클래스명<T>::함수명 으로 정의
템플릿 클래스는
class<type명>으로 객체 생성

iterator를 통해 container에 순차 접근 가능
std::컨테이너타입<데이터타입>::iterator iter; 로 선언

std::begin(컨테이너명), std::end(컨테이너명)

exception handling

try {

} catch(std::exception &ex)
를 통해 예외 처리
throw를 통해서 던진 오류(std::exception 상속)를 catch가 잡으면 polymorphism을 통해 해당 오류로 바뀜

virtual const char * what() const throw(){return message.c_str();}을 통해 what() 작성

include <algorithm>

람다 함수

[캡쳐](파라미터)->리턴타입{}

캡쳐로 잡은거를 람다함수 내에서 사용가능
위 예제에서는 파라미터에 컨테이너의 원소들이 들어가게 된다 따라서 파라미터의 데이터 형도 그에 맞춰 설정
값을 바꿀거면 참조를 해야한다.

std::for_each(시작 순서 이터레이터,끝 이터레이터, 람다함수)를 통해
for(auto elem : 리스트명) 처럼 한바퀴 돌면서 람다 함수를 적용 가능
std::copy(시작순서, 끝순서, 카피할대상에서 카피할 시작순서 이터레이터)(카피할대상이 메모리가 할당되있어야한다.)
std::transform(시작순서, 끝순서 ,람다함수)
transform을 적용할 람다함수는 변환한 값을 채울 리턴값을 내놔야한다..
std::sort(시작순서,끝순서,greater<type>());(내림차순 정렬)
std::sort(시작순서,끝순서);(오름차순 정렬)


lldb
r - run 실행
l - list 현재 위치에서 소스 파일 내용 7줄 보여줌. 여러번 다면 그 다음 줄들을 계속 보여준다.
p - prin
