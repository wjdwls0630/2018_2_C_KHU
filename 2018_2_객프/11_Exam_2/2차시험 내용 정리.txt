0.파일 스트림
#include <fstream>

ifstream - 읽기
ofstream - 쓰기

ofstream ofs(파일명);

while (ifs){
ifs>>a -> 띄어쓰기 엔터 간격으로 읽는다.(파일에 써있는 문자의 타입 상관 없다)
}
char cInput;
while (ifs.get(cInput))->문자 한개씩 모두 읽는다 while 한바퀴마다 cInput에 읽은 한 문자 저장 {

}
string sInput;
while(getline(ifs,sInput))->한줄 씩 읽음 while 한바퀴마다 sInput에 읽은 한 문장 저장{

}
ofs<<a ->(파일에 쓸 문자의 타입 상관 없다.)
char cInput;
ofs.put(cInput); -> 한문자씩 ofs에 쓴다. 보통 ifs 로 읽은 것 복사할때 쓰임

마지막에 연 파일은 꼭 닫아주자.
fs.close();
1. 포인터

포인터는 주소를 담는 변수로 사용된다.
int *p = &a;
int*p ;
p= &a;

이런식으로 선언하고 앞에 데이터형은 알맞게 써야한다. int 형 변수를 담을거면 int형 포인터식으로 해야한다.
즉 , 담을 변수의 데이터형과 일치해야한다.

그냥 p는 주소값을 가져오고 *p는 그 주소의 실체값을 불러온다.

function pointer

ex 1)
int evaluate (int(*f)(int,int),int x, int y){
return f(x,y);
}
evaluate(&add,5,4);

ex 2)
int (*f)(int,int);
f=add;
cout<<f(2,4)<<'\n'

저 function pointer는 리턴 타입, 파라미터 타입이 모두 맞는 함수가 들어갈 수있다.

2. 벡터
자동으로 동적할당하는 배열
#include <vector>

1차원 std::vector<데이터형> 벡터명(크기);
2차원 std::vector<std::vector<데이터형>> 벡터명(행 크기, std::vector<데이터형>(열 크기))

vector는 크기를 정해줘야 segmentation fault가 안뜬다. 어떻게든 구하자

벡터 함수
vector[i]=a; 대입하기(이렇게 대입하는게 맘 편함)
vector.push_back(const & ref)(맨뒤에 원소 넣는건데 넣는 값이 const 여야한다.)
vector.erase(v.begin()+i) ( i번째 인덱스 제거)
v.size() 벡터 크기 리턴
v.begin()
v.pop_back() 맨뒤 원소 제거
v.at(index) index값에 있는 값 리턴
v.empty() 비워져있으면 true 아니면 false
v.clear() 벡터 비우기

vector는 배열과 다르게 객체이므로 함수로 넘겨줄때 vector 값을 수정해야되면 &를 붙여야한다.
읽는거는 const & 로 넘겨주고
수정은 &로 넘겨주자.
(복사해야하는 임시 메모리 생성 방지)

3.배열
수정을 많이 해야한다면 벡터보다 배열을 쓰자

배열은 이미 그자체로 포인터, 주소값이다
int a[];
int*p =a면
포인터는 a의 index=0을 가리킨다.

배열의 동적할당은

int *p = new int[size];
로 하면되고 지울때는
delete []p 하면 된다

2차원 배열의 동적할당은
int** table=new int*[row];
table[i]=new int[col];
이런 식이고

지울때는
for(int i=0; i<row; i++){
delete [] table[i];
}
delete []table;
하면 된다.

4. 클래스

private 클래스 멤버함수에서는 접근 가능 하지만 그 외 함수에서는 접근 불가능

Constructor
클래스 명(파라미터=디폴트) : 멤버변수(파라미터){
그 외 코드
}
Destructor
~클래스명(){}

operator overloading

friend std::ostream & operator<<(std::ostream & os, const Fraction & fr);
Fraction & operator+=(const Fraction &fr);
Fraction & operator-=(const Fraction &fr);
Fraction & operator*=(const Fraction &fr);
Fraction & operator/=(const Fraction &fr);
const Fraction operator+(const Fraction &fr) const;
const Fraction operator-(const Fraction &fr) const;
const Fraction operator*(const Fraction &fr) const;
const Fraction operator/(const Fraction &fr) const;
Fraction & operator =(const Fraction &fr);
bool operator == (const Fraction & fr) const;
bool operator!=(const Fraction &fr) const;
Fraction & operator++();
const Fraction operator++(int);

friend 함수는 private 접근 가능
static은 객체로 부르는 함수가 아니므로
static 멤버 변수는 전역 변수처럼
클래스 밖 메인 함수 밖에서 초기화

int 클래스명::변수이름=값;

static 멤버 함수는 객체로 부르는 함수는 아니지만 클래스의 멤버 함수이므로 호출할때

클래스명::함수명()

으로 호출한다.
